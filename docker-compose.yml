services:
  auction-service:
    build:
      context: .
      dockerfile: ./apps/auction-service/Dockerfile
      target: development
    command: pnpm run start:dev auction-service
    ports:
      - '3001:3000'
    volumes:
      - ./apps/auction-service:/usr/src/app/apps/auction-service
      - ./libs:/usr/src/app/libs
      - /usr/src/app/apps/auction-service/src/prisma/generated
    env_file:
      - ./libs/common/.env
      - ./apps/auction-service/.env
    depends_on:
      postgres-auction-service:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy

  catalog-query-service:
    build:
      context: .
      dockerfile: ./apps/catalog-query-service/Dockerfile
      target: development
    command: pnpm run start:dev catalog-query-service
    ports:
      - '3002:3000'
    volumes:
      - ./apps/catalog-query-service:/usr/src/app/apps/catalog-query-service
      - ./libs:/usr/src/app/libs
    env_file:
      - ./libs/common/.env
      - ./apps/catalog-query-service/.env
    depends_on:
      mongo:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy

  bff-server:
    build:
      context: .
      dockerfile: ./apps/bff-server/Dockerfile
      target: development
    command: pnpm run start:dev bff-server
    ports:
      - '3003:3000'
    volumes:
      - ./apps/bff-server:/usr/src/app/apps/bff-server
      - ./libs:/usr/src/app/libs
    env_file:
      - ./libs/common/.env
      - ./apps/bff-server/.env

  mongo:
    image: mongo:8
    ports:
      - '27017:27017'
    volumes:
      - ./volumes/mongo:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpass
      MONGO_INITDB_DATABASE: mydb
    healthcheck:
      test: ['CMD', 'mongo', 'mongodb://root:rootpass@mongo:27017/admin', '--eval', 'db.adminCommand("ping")']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  postgres-auction-service:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - '6001:5432'
    volumes:
      - ./volumes/postgres/auction-service:/var/lib/postgresql/data
    command: ['postgres', '-c', 'wal_level=logical']
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  kafka1:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    ports:
      - '9092:9092' # PLAINTEXT
      - '10000:10000' # EXTERNAL
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka1:19092,1@kafka2:19093,2@kafka3:19094
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=CONTROLLER://:19092,PLAINTEXT://:9092,EXTERNAL://:10000
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092,EXTERNAL://kafka1:10002
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_MESSAGE_FORMAT_VERSION=3.7
      - KAFKA_CFG_INTER_BROKER_PROTOCOL_VERSION=3.7
      - KAFKA_CFG_LOG_MESSAGE_FORMAT_VERSION=3.7
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./volumes/kafka1:/bitnami/kafka
    healthcheck:
      test: ['CMD', 'kafka-topics.sh', '--bootstrap-server', 'localhost:9092', '--list']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  kafka2:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    ports:
      - '9093:9092'
      - '10001:10000'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka1:19092,1@kafka2:19093,2@kafka3:19094
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=CONTROLLER://:19093,PLAINTEXT://:9093,EXTERNAL://:10000
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9093,EXTERNAL://kafka2:10003
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_MESSAGE_FORMAT_VERSION=3.7
      - KAFKA_CFG_INTER_BROKER_PROTOCOL_VERSION=3.7
      - KAFKA_CFG_LOG_MESSAGE_FORMAT_VERSION=3.7
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./volumes/kafka2:/bitnami/kafka
    healthcheck:
      test: ['CMD', 'kafka-topics.sh', '--bootstrap-server', 'localhost:9093', '--list']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  kafka3:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    ports:
      - '9094:9092'
      - '10002:10000'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka1:19092,1@kafka2:19093,2@kafka3:19094
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=CONTROLLER://:19094,PLAINTEXT://:9094,EXTERNAL://:10000
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka3:9094,EXTERNAL://kafka3:10004
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_MESSAGE_FORMAT_VERSION=3.7
      - KAFKA_CFG_INTER_BROKER_PROTOCOL_VERSION=3.7
      - KAFKA_CFG_LOG_MESSAGE_FORMAT_VERSION=3.7
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./volumes/kafka3:/bitnami/kafka
    healthcheck:
      test: ['CMD', 'kafka-topics.sh', '--bootstrap-server', 'localhost:9094', '--list']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  kafka-web-ui:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      - KAFKA_CLUSTERS_0_NAME=Local-Kraft-Cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:9092,kafka2:9092,kafka3:9092
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy

  kafka-connect:
    build:
      context: .
      dockerfile: Dockerfile.connect
    ports:
      - '8083:8083'
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9092,kafka3:9092
      CONNECT_REST_PORT: 8083
      # 클러스터로 구성시 이걸로 동일성 판단
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/java/custom-transforms
      CONNECT_REST_ADVERTISED_HOST_NAME: localhost
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy

  minio:
    image: minio/minio:RELEASE.2025-03-12T18-04-18Z-cpuv1
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: miniopassword
    command: server /data --console-address ":9001"
    volumes:
      - ./volumes/minio:/data

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set myminio http://minio:9000 minioadmin miniopassword;
      mc ls myminio/my-bucket || mc mb myminio/my-bucket;
      mc anonymous set public myminio/my-bucket;
      mc admin config set myminio api cors allow-origin=\"*\";
      exit 0;
      "
